import nu.studer.gradle.jooq.JooqEdition

apply plugin: "java-library"
apply plugin: "org.flywaydb.flyway"
apply plugin: "nu.studer.jooq"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"

ext {
    database = 'outlay'
    username = 'outlay'
    password = 'outlay'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.springframework:spring-jdbc'
    implementation 'org.flywaydb:flyway-core'

    runtimeOnly 'io.r2dbc:r2dbc-postgresql'
    runtimeOnly 'org.postgresql:postgresql'

    jooqGenerator 'org.postgresql:postgresql:42.3.1'
    jooqGenerator 'jakarta.xml.bind:jakarta.xml.bind-api:3.0.1'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}



flyway {
    url = "jdbc:postgresql://localhost:5432/${project.database}"
    user = project.username
    password = project.password
    schemas = ['public']
}


jooq {
    version = '3.16.4'
    edition = JooqEdition.OSS

    configurations {
        main {
            generationTool {
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = "jdbc:postgresql://localhost:5432/${project.database}"
                    user = project.username
                    password = project.password
                }
                generator {
                    database {
                        inputSchema = 'public'
                    }
                }
            }
        }
    }
}

task updateDataBase {
    dependsOn(flywayMigrate)
    dependsOn(generateJooq)
}


tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}